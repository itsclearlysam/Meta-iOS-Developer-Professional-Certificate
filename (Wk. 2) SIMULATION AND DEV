SIMULATORS


What is a Simulator?

A simulator is a computer program that's designed to simulate another kind of device.
Replicating the experience of the original hardware or software by mimicking the behavior of mobile devices. 
Simulators allow you to test how your apps will run on the devices you've designed them for without having to install them on the actual physical devices. 
Simulators do, however, require high computing resources in most cases. 
This means that if you are going to use a simulator on your machine,
it's important to make sure there's enough storage space and random access memory or RAM available for it to run effectively. 

-----------------------------------------------------------------------------------------------------------------
Several commercial and open source simulators available for most of the operating systems in the market:

1. BlueStacks: 
allow you to run android apps on operating systems like Mac and Windows.

2. Appetize.io:
 a browser-based emulator that allows you to use iOS applications on any PC.

3.  Wine:
run Windows applications on the Linux OS.

4. Nestopia:
nestopia allow you to play Nintendo games on Linux. 

5. SNES Classic console simulators:
standalone, allow gamers to play old video games on modern HD televisions. 

6. PlayStation portable simulators:
allow users to play games made for other consoles on Sony's mobile system. 



-----------------------------------------------------------------------------------------------------------------
Mobile CPU architecture


What is a CPU? 

A CPU is like a middleman that enables software to communicate with the hardware of a device. 
It can take high-level software instructions and translate them into native machine language that a mobile phone can understand and perform specific operations based on.
To deliver the best experience to users, what you most likely want is a CPU that’s a mix of efficiency and power, and doesn't use a lot of resources—something that will be determined by its architecture. 
A CPU with great architecture provides mobile users with a seamless user experience without consuming a lot of battery resources.



What’s ARM, ARM64, and x86?

As of now, there are three main CPU architectures used in most smartphones – ARM, ARM64, and x86. 

-ARM: ARMv7 or armeabi
-ARM64: AArch64 or arm64
-x86: x86 or x86abi
Of these three, ARM is most used because it is optimized for battery use. 


On the other hand, ARM64 is an extension of the original ARM architecture that provides additional support for more powerful computing in the form of 64-bit processing, 
and it’s gradually becoming the standard in many newer devices.

Another piece of architecture noteworthy to mention is the x86. 
It is slightly more sophisticated than either type of ARM CPU earlier mentioned but not quite as battery-friendly.
Due to this drawback, it is the least common of the three in the computing world.
Overall, ARM is more of an embodiment of the mobile-first mentality, with simple sets of instructions, efficiency, and low energy consumption as its main priorities. 
The fact that it requires fewer transistors and frees up this hardware space more than compensates for the use of RAM in a mobile phone.

To develop and deploy apps for different mobile devices, the CPU architecture must be considered. 
For example, building a social network app for a large audience requires that most mobile devices are targeted.

-----------------------------------------------------------------------------------------------------------------

Simulator Operating System Versions


Simulator operating systems are versions of iOS that you can run on a computer. 
With the help of these simulator OS versions, your app can leverage the features of any operating system in the market.

With OS images, you can enjoy the built-in features of different operating systems using the iOS software development kit, or SDK. 

The most recent iOS versions available for developers in Xcode range from iOS 7, released in 2014 to iOS 15, released in 2022. 
More specifically, after the release of iOS 7.1.2 in 2014, came 9.3.5 in 2016, and 10.3.3 in 2017. 
These were followed by 9.3.6, and 10.3.4 in 2019, 12.5.5 in 2021, and 15.5 in 2022.


***you must install the simulator in order to have access to the operating system that you want to simulate.***



-----------------------------------------------------------------------------------------------------------------

OS versions and images
iOS operating system images are just versions of iOS that you can run on a computer. So, if you wanted to test the very latest features you could download the simulator of the latest Apple OS to see what the operating system is like. Or if you wanted to test your app against the iPhone 11 Pro, you could download the iPhone 11 Pro system image and run that.

The below table shows the evolution of the OS versions and their architectures.

Version                      Architecture
-3.0                          32-bit ARM
-4.0                          32-bit ARM
-5.0                          32-bit ARM
-6.0                          32-bit ARM
-7.0                          32-bit/64-bit ARM
-9.0                          32-bit/64-bit ARM
-10.0                         32-bit/64-bit ARM
-11.0                         64-bit ARM
-12.0                         64-bit ARM
-13.0                         64-bit ARM
-14.0                         64-bit ARM
-15.0                         64-bit ARM

-----------------------------------------------------------------------------------------------------------------

iOS Simulators

The iOS simulator presents the iPhone, iPad, or Apple Watch user interface in a window on your Mac computer.

HOW TO START SIMULATOR

1. select window in the Xcode top bar and then click Devices and simulators.
2.A window with two tabs, one for devices and another for simulators, displays. 
3. When you click the devices tab, it will display any physical iOS devices you are connected to. 
4.The simulators tab displays all the simulators available to you. 
5.You can close the windows interface that's currently open. 
6.To start a simulator, you can click on Xcode in the top bar, select the option open developer tool from the drop-down list and click on simulator in the sub-menu.


-----------------------------------------------------------------------------------------------------------------

Common libraries and packages

One of the most fundamental lessons every developer should be aware of is, “don’t reinvent the wheel.” 
And understanding how to use libraries and packages in XCode is a big part of that.
When you can use a library that does the job efficiently and faster, why spend hours hitting your head against the wall?
In other words, if a common task needs to be performed, you may not necessarily need to write the code yourself.
It might feel like “cheating” to use someone else’s code to resize a bitmap or modify a string but, in truth, it’s all about getting the work done quickly. 
This approach is useful, especially for independent developers who don't have much time and resources to throw at every project.
Libraries in Xcode extend Xcode SDK capabilities by allowing you to use code written by other developers. 
The best libraries provide entirely new functionality and let you do some seriously awesome functions with lesser code as a developer. 
Unlike copying and pasting code, libraries are entirely portable and easy to plug in too. 
This method makes it easier for developers to access more advanced features with less work and more complexity.
Here are various categories in iOS development and the common libraries used in them.



..................................
1. iOS Libraries - image loading:
Image loading libraries are very useful to avoid high memory consumption caused by loading multiple images simultaneously.
A typical scenario is a social media app where a user can see photos posted by other users.

..................................
2. PINRemoteImage:
PINRemoteImage is an image loading library focused on providing a smooth scrolling experience while an image is loading.
PINRemoteImage ensures image loading is as swift and smooth as possible by applying smart caching to minimize storage overhead

..................................
3. iOS Libraries - videos:
Displaying videos is usually a daunting task for developers during development. 
The processes and details to take care of can be too numerous to handle without the use of a library

..................................
4.AVPlayer
AVPlayer is part of the iOS SDK (Software Development Kit).
And it provides an additional interface to control the playback and timing of a media asset such as a video.
One of AVPlayer biggest benefits is its ease of customization.

..................................
5. iOS Libraries—Networking
In this internet age, almost every mobile app requires some sort of network request to perform one function or the other.
Fortunately, there is a wide range of networking libraries available to help developers optimize this process.

..................................
6. AFNetworking:
AFNetworking is one of the popular networking libraries in iOS development. 
It provides you with a great way of making internet calls within your iOS application.

